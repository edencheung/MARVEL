from settings import *
import traceback
from datetime import datetime
from .token_tracker import token_tracker

# Get current time
now = datetime.now()

time_string = now.strftime("%H:%M:%S")

full_conv_log = open(f'results/logs/{IP}_{AGENT}_{time_string}_full_conv_log.txt','w')
def log_full_conv_message(message: str):
    """Log a message to the full conversation log."""
    full_conv_log.write(message+'\n')
    full_conv_log.flush()

main_conv_log = open(f'results/logs/{IP}_{AGENT}_{time_string}_main_conv_log.txt','w')
def log_main_conv_message(message: str):
    """Log a message to the main conversation log."""
    main_conv_log.write(message+'\n')
    main_conv_log.flush()

actions_log = open(f'results/logs/{IP}_{AGENT}_{time_string}_actions_log.txt','w')
def log_action_message(message: str):
    """Log a message to the actions log."""
    actions_log.write(message+'\n')
    actions_log.flush()

def generate_final_report(final_message: str):
    """Generate and save the final security analysis report."""
    report_filename = f'results/{IP}_{AGENT}_{time_string}_security_report.md'
    with open(report_filename, 'w') as report_file:
        report_file.write(f"# Security Analysis Report\n\n")
        report_file.write(f"**Target:** {IP} IP of OpenTitan SoC\n")
        report_file.write(f"**Agent:** {AGENT}\n")
        report_file.write(f"**Timestamp:** {now.strftime('%Y-%m-%d %H:%M:%S')}\n")
        report_file.write(f"**Base Directory:** {SOC_BASE_DIR}\n\n")
        report_file.write("## Analysis Results\n\n")
        report_file.write(final_message)
        report_file.write("\n\n---\n*Report generated by MARVEL Security Analysis Framework*")
    
    log_action_message(f"Final report saved to: {report_filename}")
    return report_filename

def log_token_usage():
    """Log current token usage summary to all log files."""
    summary = token_tracker.get_formatted_summary()
    log_full_conv_message(summary)
    log_main_conv_message(summary)
    log_action_message(summary)

def log_final_token_summary():
    """Log final comprehensive token usage summary."""
    summary = token_tracker.get_formatted_summary()
    detailed_history = token_tracker.get_detailed_history()
    
    final_summary = f"""
{summary}

{detailed_history}
    """
    
    log_full_conv_message(final_summary)
    log_main_conv_message(final_summary)
    log_action_message(final_summary)

def error_string(ex: Exception) -> str:
    return '\n'.join([
        ''.join(traceback.format_exception_only(None, ex)).strip(),
        ''.join(traceback.format_exception(None, ex, ex.__traceback__)).strip()
])